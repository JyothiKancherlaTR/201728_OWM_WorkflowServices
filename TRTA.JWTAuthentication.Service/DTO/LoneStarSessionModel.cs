using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using TRTA.OSP.Authentication.Service.Enums;

namespace TRTA.OSP.Authentication.Service.DTO
{
    /// <summary>
    /// A LoneStar base session 
    /// </summary>
    public sealed class LoneStarSessionModel
    {
        /// <summary>
        /// Value of <see cref="EventManagerId"/> when no DEM session ID was given or discovered
        /// </summary>
        public const string NoEventManagerId = "UNKNOWN_ID";

        /// <summary>
        /// A unique string generated by the caller to identify this session.  It should
        /// be no more than 35 characters long (32 bytes for compatibility with TRAMS 
        /// tools like TRMR and ErrorGui), and not include any dashes.
        /// </summary>
        /// <value>The Session Id, ex. "123456789012345678901234567890ab" </value>
        public string SessionId { get; set; }

        /// <summary>
        /// Distributed Event Manager ID for the user's work session.
        /// This field currently has a limit of 40 bytes.
        /// </summary>
        /// <value>DEM session ID</value>
        /// <remarks>Will go into the PrismGuid field of the UDS session</remarks>
        public string EventManagerId { get; set; }

        /// <summary>
        /// A string, no more than 20 characters, which describes the site where the UI
        /// instance is deployed.  This value must match the site where the receiving 
        /// UDS instance is deployed. In WestLaw Cobalt, possible values are site 'A' 
        /// or site 'B.
        /// </summary>
        /// <value>The site.</value>
        public string Site { get; set; }

        /// <summary>
        /// Current status of this user's session.
        /// </summary>
        /// <value>The status as a <see cref="SessionStatus"/> enumeration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public SessionStatus Status { get; set; }

        /// <summary>
        /// The encoded UDS session "long token", which is generated by UDS during the 
        /// CreateSession processing.
        /// </summary>
        /// <value>The UDS long token.</value>
        public string LongToken { get; set; }

       
        /// <summary>
        /// This field describes the reason why the session might expire, 
        /// ex. "UserInactivity".
        /// </summary>
        /// <value>The expires reason as an <see cref="SessionExpireReason"/> 
        /// enumeration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public SessionExpireReason ExpiresReason { get; set; }

        /// <summary>
        /// This field must NOT be set on creation. It is typically set on the Update
        /// request which ends the session, and describes the reason why the session 
        /// was ended.  Some typical values might be "Maintenance", or "UserSignedOff", 
        /// or "UserInactivity".
        /// </summary>
        /// <value>The session ended reason as an <see cref="SessionExpireReason"/> 
        /// enumeration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public SessionExpireReason SessionEndedReason { get; set; }

        
        /// <summary>
        /// Gets or sets the user's first name.
        /// </summary>
        /// <value>The first name.</value>
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the user's last name.
        /// </summary>
        /// <value>The last name.</value>
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the user's full name.
        /// </summary>
        /// <value>The full name.</value>
        [JsonProperty(PropertyName = "FullName")]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or sets the user's email address.
        /// </summary>
        /// <value>The email address.</value>
        public string EmailAddress { get; set; }

        /// <summary>
        /// The standard x500 ONESOURCE format credential of the user, 
        /// ex. "o=OneSource,uid=bobsmith,ou=XY7". Applications should parse 
        /// username and firm ID from this field.
        /// </summary>
        /// <value>x500 format credential of the user</value>
        /// <remarks>Goes to the OnePassUserName field in the UDS session</remarks>
        public string OneSourceUserX500 { get; set; }

        /// <summary>
        /// This optional date field identifies when the session was created.  
        /// If this field or the ExpiresDateTime is not set by the caller on the Create 
        /// request, UDS will set this field to the current time.
        /// </summary>
        /// <value>The created date time.</value>	
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the absolute expires date time. Should NOT be extended once set.
        /// This optional date field identifies when the session should expire -- 
        /// the latest time at which the session is allowed to be active.
        /// If this field or the CreatedDateTime is not set by the caller on the Create 
        /// request, UDS will set this field to 24 hours after the created time.
        /// </summary>
        /// <value>The expires date time.</value>
        public DateTime? ExpiresDateTime { get; set; }

        /// <summary>
        /// This date field is required on the Session Create, and should be set to a 
        /// time in the future at which the session could be ended due to inactivity.  
        /// If no update to the Session object extends the timestamp in this field, the 
        /// SessionReaper could end the session behind-the-scenes. Typical inactivity 
        /// timeout values range from 15 to 90 minutes.
        /// </summary>
        /// <value>The orphan expires date time.</value>
        public DateTime? OrphanExpiresDateTime { get; set; }

        /// <summary>
        /// Datetime the session ended. This date field must NOT be set on session 
        /// Create, but should be set when the session is being updated to "end" it 
        /// (set the status to 'Killed').
        /// </summary>
        /// <value>The session ended date time.</value>
        public DateTime? SessionEndedDateTime { get; set; }

        /// <summary>
        /// The date and time when the session will end, if it has not been ended prior 
        /// to that time.  There is a maximum duration for every session, and this date 
        /// represents the max duration of this session.
        /// </summary>
        /// <value>The session expires date time.</value>
        public DateTime? SessionExpiresDateTime { get; set; }


        /// <summary>
        /// UDS supports "throttling" (allowing a configured number) of sessions based on 
        /// a number of criteria, including "tier".  Based on the number assigned to this 
        /// field in the Create session processing, UDS will validate that the current 
        /// number of active sessions for users assigned to that tier (and any tier 
        /// above) does not exceed the configured limit assigned for that tier. <br/>
        ///   Tier 0 indicates special users (usually Operations or SWAT users) who need
        ///     to be allowed onto the system even when the system has reached the limit 
        ///     on the number of allowed sessions.<br/>
        ///   Tier 1 usually indicates the typical paying customer, and the only limit 
        ///     that applies is the total session limit assigned to the current site and 
        ///     entire system.<br/>
        ///   Tier 2 usually indicates a lower Tier (users getting a free trial for the 
        ///     product, for example) and can have a specific limit set for this type of 
        ///     user session.<br/>
        ///   Tier 3 often indicates internal users, and can have a specific limit set 
        ///     for this type of user session.
        /// </summary>
        /// <value>The tier, ex. "1".</value>
        public byte Tier { get; set; }

        /// <summary>
        /// Used to identify different access methods for the same product.  Typical 
        /// values could be "Web", "MobileWeb", etc.
        /// </summary>
        /// <value>The session source as a <see cref="SessionSourceTypes"/>
        ///  enumeration.</value>
        public SessionSourceTypes SessionSource { get; set; }


        /// <summary>
        /// this field is used to store the current user's IP address
        /// </summary>
        public string IpAddress { get; set; }

        /// <summary>
        /// User category (support, portal admin, etc.)  
        /// </summary>
        /// <value>The user category as a <see cref="SessionUserCategories"/> 
        /// enumeration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public SessionUserCategories UserCategory { get; set; }

        /// <summary>
        /// Validate the session has not been killed or expired
        /// </summary>
        /// <returns>true if session is still active/valid</returns>
        public bool IsValid()
        {
            if (Status == SessionStatus.Killed)
            {
                return false;
            }
            DateTime now = DateTime.UtcNow;
            DateTime maxExpirationDate = SessionExpiresDateTime == null ? DateTime.MaxValue : (DateTime)SessionExpiresDateTime;
            DateTime orphanExpiresDate = OrphanExpiresDateTime == null ? DateTime.MaxValue : (DateTime)OrphanExpiresDateTime;
            if (now > maxExpirationDate.ToUniversalTime() || now > orphanExpiresDate.ToUniversalTime())
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// Dump the session data to a string (for debugging/logging purposes)
        /// </summary>
        public override string ToString()
        {
            // save a copy of the original UDS object as aJSON string
            string jsonValue = JsonConvert.SerializeObject(this, Formatting.Indented, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });
            return jsonValue;
        }
    }

}
